{"version":3,"sources":["client.js","queries.js","Query.js","Wrapper.js","App.js","reportWebVitals.js","index.js"],"names":["client","ApolloClient","uri","headers","Authorization","process","service","name","url","authorization","skipSSLValidation","GET_PR_REVIEWS","gql","Query","repoName","onRequestComplete","isDataLoaded","queryString","useMemo","d","Date","month","getMonth","year","getFullYear","length","padStart","join","getFirstDateOfMonth","res","useQuery","variables","useEffect","data","userToReviewCountMap","search","edges","reduce","prev","curr","authorSet","Set","node","comments","nodes","forEach","comment","add","author","login","reviews","review","username","undefined","style","marginTop","useStyles","makeStyles","table","width","margin","repoList","memberList","index","Wrapper","classes","useState","repoReviewCounts","setRepoReviewCounts","setReviewCountsData","useCallback","reviewCountData","console","log","isDataReady","every","Table","className","aria-label","TableHead","TableRow","TableCell","map","align","TableBody","member","component","scope","marginLeft","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13cdfa9d.chunk.js","sourcesContent":["import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  headers: {\n    Authorization: `bearer ${process.env.REACT_APP_GITHUB_KEY}`,\n  },\n  service: {\n    name: \"github\",\n    url: \"https://api.github.com/graphql\",\n    // optional headers\n    headers: {\n      authorization: `bearer ${process.env.REACT_APP_GITHUB_KEY}`,\n    },\n    // optional disable SSL validation check\n    skipSSLValidation: true,\n  },\n});\n\nexport default client;\n","import gql from \"graphql-tag\";\n\nexport const GET_PR_REVIEWS = gql`\n  query($queryString: String!) {\n    search(query: $queryString, type: ISSUE, first: 100) {\n      edges {\n        node {\n          ... on PullRequest {\n            title\n            reviews(first: 100) {\n              nodes {\n                author {\n                  login\n                }\n              }\n            }\n            comments(first: 100) {\n              nodes {\n                author {\n                  login\n                }\n              }\n            }\n            createdAt\n          }\n        }\n      }\n    }\n    # repository(owner: $owner, name: $name) {\n    #   pullRequests(first: 10, after: \"2021-01-01\") {\n    #     nodes {\n    #       bodyText\n    #       comments(first: 100) {\n    #         nodes {\n    #           author {\n    #             login\n    #           }\n    #           bodyText\n    #         }\n    #       }\n    #     }\n    #   }\n    # }\n  }\n`;\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { GET_PR_REVIEWS } from \"./queries\";\n\nimport { useEffect, useMemo } from \"react\";\n\nconst Query = ({ repoName, onRequestComplete, isDataLoaded }) => {\n  const queryString = useMemo(\n    () => `repo:meshkorea/${repoName} is:pr created:>=${getFirstDateOfMonth()}`,\n    [repoName]\n  );\n\n  const res = useQuery(GET_PR_REVIEWS, {\n    variables: {\n      queryString: queryString,\n    },\n  });\n  useEffect(() => {\n    if (res && res.data) {\n      const userToReviewCountMap = res.data.search.edges.reduce(\n        (prev, curr) => {\n          const authorSet = new Set();\n\n          curr.node.comments.nodes.forEach((comment) => {\n            authorSet.add(comment.author.login);\n          });\n\n          curr.node.reviews.nodes.forEach((review) => {\n            authorSet.add(review.author.login);\n          });\n\n          authorSet.forEach((username) => {\n            prev[username] =\n              prev[username] === undefined ? 1 : prev[username] + 1;\n          });\n\n          return prev;\n        },\n        {}\n      );\n\n      onRequestComplete(repoName, userToReviewCountMap);\n    }\n  }, [res]);\n\n  return (\n    <li style={{ marginTop: \"20px\" }}>\n      {repoName}: {isDataLoaded ? \"데이터 로드 완료\" : \"데이터 로드 중\"}\n    </li>\n  );\n};\n\nexport default Query;\n\nfunction getFirstDateOfMonth() {\n  var d = new Date(),\n    month = \"\" + (d.getMonth() + 1),\n    year = d.getFullYear();\n\n  if (month.length < 2) month = month.padStart(2, \"0\");\n\n  return [year, month, \"01\"].join(\"-\");\n}\n","import { useState, useCallback, useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport Query from \"./Query\";\n\nconst useStyles = makeStyles({\n  table: {\n    width: 1020,\n    margin: \"40px auto 40px\",\n  },\n});\nconst repoList = [\n  \"vroong-tms-manager-web\",\n  \"vroong-design-system-web\",\n  \"mesh-one-web\",\n  \"vroong-ceo-web\",\n];\n\nconst repoIndexMap = repoList.reduce((prev, curr, index) => {\n  prev[curr] = index;\n  return prev;\n}, {});\n\n// TODO: get member list from api\nconst memberList = [\n  \"mindfull\",\n  \"magichim\",\n  \"haeguri\",\n  \"kizmo04\",\n  \"Pewww\",\n  \"jungpaeng\",\n  \"juunone\",\n  \"k44ng\",\n  \"minseoksuh\",\n  \"yeomhyeseon\",\n];\n\nexport default function Wrapper() {\n  const classes = useStyles();\n\n  const [repoReviewCounts, setRepoReviewCounts] = useState({});\n\n  const setReviewCountsData = useCallback(\n    (repoName, reviewCountData) => {\n      setRepoReviewCounts({ ...repoReviewCounts, [repoName]: reviewCountData });\n    },\n    [repoReviewCounts]\n  );\n\n  console.log(\"state\", repoReviewCounts);\n\n  const isDataReady = useMemo(() => {\n    return repoList.every((repoName) => !!repoReviewCounts[repoName]);\n  }, [repoReviewCounts]);\n\n  console.log({ isDataReady });\n\n  return (\n    <div style={{ margin: \"auto\" }}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Dev / Repo</TableCell>\n            {repoList.map((repoName) => (\n              <TableCell align=\"right\">{repoName}</TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {isDataReady\n            ? memberList.map((member) => (\n                <TableRow key={member}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {member}\n                  </TableCell>\n                  {repoList.map((repoName) => (\n                    <TableCell align=\"right\">\n                      {repoReviewCounts[repoName][member] ?? 0}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            : \"데이터 로드 중\"}\n        </TableBody>\n      </Table>\n      <hr style={{ margin: \"0 20px\" }} />\n      <br />\n\n      <ul style={{ marginLeft: \"30px\" }}>\n        {repoList.map((repoName) => (\n          <Query\n            repoName={repoName}\n            onRequestComplete={setReviewCountsData}\n            isDataLoaded={!!repoReviewCounts[repoName]}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import { ApolloProvider } from \"@apollo/react-hooks\";\nimport client from \"./client\";\nimport Wrapper from \"./Wrapper\";\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Wrapper />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}